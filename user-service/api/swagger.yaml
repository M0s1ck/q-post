definitions:
  dto.ErrorResponse:
    properties:
      message:
        example: Error info
        type: string
    type: object
  dto.UserDetailStr:
    properties:
      birthday:
        example: "2006-01-02"
        type: string
      description:
        example: I love ball and films'
        type: string
      name:
        example: John Doe
        type: string
    type: object
  dto.UserResponse:
    properties:
      birthday:
        type: string
      commentKarma:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      postKarma:
        type: integer
      username:
        type: string
    type: object
  dto.UserToCreate:
    properties:
      userId:
        type: string
      username:
        type: string
    type: object
  dto.UuidOnlyResponse:
    properties:
      id:
        example: 1214a280-1162-408a-918f-5cb9300194ce
        type: string
    type: object
info:
  contact: {}
  description: Gin app to deal with users
  title: QPost user service
  version: 1.0.0
paths:
  /health:
    get:
      responses:
        "200":
          description: OK
      summary: Service healthcheck
      tags:
      - Health
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Removes user by their id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Removes user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get user by id
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates user details by their id, requires user's jwt, date is
        in the YYYY-MM-DD format
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      - description: details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserDetailStr'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user details
      tags:
      - Users
  /users/create:
    post:
      consumes:
      - application/json
      description: Creates a new user, saves him to db, returns created id.
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserToCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UuidOnlyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new user
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
