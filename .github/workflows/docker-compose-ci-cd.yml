name: Bring up in docker

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:

  bring-up-docker-on-runner:
    runs-on: ubuntu-latest

    steps:
      - name: Copy source code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24

      - name: Install migrate CLI
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.1/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/local/bin/

      - name: Build .env file from GitHub secrets
        run: |
          cat <<EOF > .env
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST=${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT=${{ vars.POSTGRES_PORT }}
          
          AUTH_SERVICE_HOST=${{ vars.AUTH_SERVICE_HOST }}
          AUTH_SERVICE_PORT=${{ vars.AUTH_SERVICE_PORT }}
          POSTGRES_AUTH_SCHEME=${{ vars.POSTGRES_AUTH_SCHEME }}
          
          USER_SERVICE_HOST=${{ vars.USER_SERVICE_HOST }}
          USER_SERVICE_PORT=${{ vars.USER_SERVICE_PORT }}
          POSTGRES_COMMUNITY_SCHEME=${{ vars.POSTGRES_COMMUNITY_SCHEME }}
          
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          API_SECRET_KEY=${{ secrets.API_SECRET_KEY }}
          EOF

      - name: Build containers
        run: docker compose build

      - name: Bring up postgre db
        run: docker compose up psg -d

      - name: Wait for postgre db
        run: sleep 10

      - name: Create schemas
        run: |
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h localhost -U ${{ secrets.POSTGRES_USER }} -d q-post -c "CREATE SCHEMA IF NOT EXISTS ${{ vars.POSTGRES_AUTH_SCHEME }};"
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h localhost -U ${{ secrets.POSTGRES_USER }} -d q-post -c "CREATE SCHEMA IF NOT EXISTS ${{ vars.POSTGRES_COMMUNITY_SCHEME }};"

      - name: Run migrations
        run: |
          migrate -path auth-service/internal/infra/db/migrations -database "postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:${{ vars.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB }}?sslmode=disable&search_path=${{ vars.POSTGRES_AUTH_SCHEME }}" up
          migrate -path user-service/internal/infra/db/migrations -database "postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:${{ vars.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB }}?sslmode=disable&search_path=${{ vars.POSTGRES_COMMUNITY_SCHEME }}" up

      - name: Bring up services
        run: docker compose up -d

      - name: Wait for services
        run: sleep 10

      - name: Show logs
        if: always()
        run: docker compose logs --tail=200

      - name: Ping health test
        run: |
          curl --fail http://localhost:${{ vars.USER_SERVICE_PORT }}/health
          curl --fail http://localhost:${{ vars.AUTH_SERVICE_PORT }}/health

      - name: Bring down
        if: always()
        run: docker compose down


  # if succefully builds and runs on runner, deploy to vm
  build-and-push-to-docker-hub:
    runs-on: ubuntu-latest
    needs: bring-up-docker
    # if: github.ref == 'refs/heads/main'   # Temporary, for tetsing on every branch

    steps:
      - name: Copy source code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build images
        uses: |
          docker build -t ${{ vars.DOCKERHUB_USERNAME }}/auth-service:latest ./auth-service
          docker build -t ${{ vars.DOCKERHUB_USERNAME }}/user-service:latest ./user-service           

      - name: Push images to DockerHub  # our container registry
        uses: |
          docker push ${{ vars.DOCKERHUB_USERNAME }}/auth-service:latest
          docker push ${{ vars.DOCKERHUB_USERNAME }}/user-service:latest


  # deploy on vm via pulling images froim docker hub and docker compose
  deploy:
    needs: build-and-push-to-docker-hub
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy updated services
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            cd opt/q-post
            sudo docker compose pull
            
            sudo docker compose run --rm auth-service \
            migrate -path auth-service/internal/infra/db/migrations \
            -database "postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:${{ vars.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB }}?sslmode=disable&search_path=${{ vars.POSTGRES_AUTH_SCHEME }}" up
            
            sudo docker compose run --rm user-service \
            migrate -path user-service/internal/infra/db/migrations \
            -database "postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:${{ vars.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB }}?sslmode=disable&search_path=${{ vars.POSTGRES_USER_SCHEME }}" up
            
            sudo docker compose up -d
